# TODO1 - fix typo sdwan-trusted
# TODO2 - Breakdown SD-WAN and Firewall separated scripts

#Parameters
rg=lab-hub-dmzfw #Define your resource group
location=southcentralus #Set location
username=azureuser #Set username
password=Msft123Msft123 #Set password
virtualMachineSize=Standard_DS1_v2 #Set VM size

#Variables
mypip=$(curl -4 ifconfig.io -s) #Captures your local Public IP and adds it to NSG to restrict access to SSH only for your Public IP.

#Define parameters for Azure Hub and Spokes:
AzurehubName=az-hub #Azure Hub Name
AzurehubaddressSpacePrefix=10.0.0.0/24 #Azure Hub VNET address space
AzurehubNamesubnetName=subnet1 #Azure Hub Subnet name where VM will be provisioned
Azurehubsubnet1Prefix=10.0.0.0/27 #Azure Hub Subnet address prefix
AzurehubgatewaySubnetPrefix=10.0.0.32/27 #Azure Hub Gateway Subnet address prefix
AzureFirewallPrefix=10.0.0.64/26 #Azure Firewall Prefix
AzurehubrssubnetPrefix=10.0.0.128/27 #Azure Hub Route Server subnet address prefix
AzureHubBastionSubnet=10.0.0.192/26
Azurespoke1Name=az-spk1 #Azure Spoke 1 name
Azurespoke1AddressSpacePrefix=10.0.1.0/24 # Azure Spoke 1 VNET address space
Azurespoke1Subnet1Prefix=10.0.1.0/27 # Azure Spoke 1 Subnet1 address prefix
Azurespoke2Name=az-spk2 #Azure Spoke 2 name
Azurespoke2AddressSpacePrefix=10.0.2.0/24 # Azure Spoke 1 VNET address space
Azurespoke2Subnet1Prefix=10.0.2.0/27 # Azure Spoke 1 VNET address space

#Parsing parameters above in Json format (do not change)
JsonAzure={\"hubName\":\"$AzurehubName\",\"addressSpacePrefix\":\"$AzurehubaddressSpacePrefix\",\"subnetName\":\"$AzurehubNamesubnetName\",\"subnet1Prefix\":\"$Azurehubsubnet1Prefix\",\"AzureFirewallPrefix\":\"$AzureFirewallPrefix\",\"gatewaySubnetPrefix\":\"$AzurehubgatewaySubnetPrefix\",\"rssubnetPrefix\":\"$AzurehubrssubnetPrefix\",\"bastionSubnetPrefix\":\"$AzureHubBastionSubnet\",\"spoke1Name\":\"$Azurespoke1Name\",\"spoke1AddressSpacePrefix\":\"$Azurespoke1AddressSpacePrefix\",\"spoke1Subnet1Prefix\":\"$Azurespoke1Subnet1Prefix\",\"spoke2Name\":\"$Azurespoke2Name\",\"spoke2AddressSpacePrefix\":\"$Azurespoke2AddressSpacePrefix\",\"spoke2Subnet1Prefix\":\"$Azurespoke2Subnet1Prefix\"}

#Deploy base lab environment = Hub + VPN Gateway + VM and two Spokes with one VM on each.
echo Deploying base lab: Hub with Spoke1 and 2. VMs and Azure Route Server.
echo "*** It will take around 20 minutes to finish the deployment ***"
az group create --name $rg --location $location --output none
az deployment group create --name lab-$RANDOM --resource-group $rg \
--template-uri https://raw.githubusercontent.com/dmauser/azure-hub-spoke-base-lab/main/azuredeployv5.json \
--parameters Restrict_SSH_VM_AccessByPublicIP=$mypip deployHubERGateway=true deployAzureRouteServer=true Azure=$JsonAzure VmAdminUsername=$username VmAdminPassword=$password virtualMachineSize=$virtualMachineSize deployBastion=true \
--output none

########### OPNsense FIREWALL parameters
ShellScriptName=configureopnsense.sh
scenarioOption="TwoNics"
virtualMachineSize=Standard_DS1_v2
virtualNetworkName=$AzurehubName-vnet
existingvirtualNetwork=existing
VNETAddress=10.0.0.0/24 
UntrustedSubnetCIDR=10.0.0.96/28
TrustedSubnetCIDR=10.0.0.112/28
existingUntrustedSubnetName=fw-untrusted
existingTrustedSubnetName=fw-trusted
#OpnScriptURI=https://raw.githubusercontent.com/dmauser/azure-virtualwan/main/natvpn-over-er/opnsense/

# Create untrusted subnetnet
echo Creating untrusted subnet
az network vnet subnet create -g $rg --vnet-name $AzurehubName-vnet --name $existingUntrustedSubnetName --address-prefixes $UntrustedSubnetCIDR --output none
# Create trusted subnetnet
echo Creating trusted subnet
az network vnet subnet create -g $rg --vnet-name $AzurehubName-vnet --name $existingTrustedSubnetName --address-prefixes $TrustedSubnetCIDR --output none

echo "Deploying OPNsense NVA1 on the $AzurehubName"
nvafw=$AzurehubName-opnfw1
az vm image terms accept --urn thefreebsdfoundation:freebsd-13_1:13_1-release:13.1.0 -o none
az deployment group create --name $AzurehubName-nva-$RANDOM --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters scenarioOption=$scenarioOption virtualMachineName=$nvafw virtualMachineSize=$virtualMachineSize existingvirtualNetwork=$existingvirtualNetwork VNETAddress="[\"$VNETAddress\"]" virtualNetworkName=$virtualNetworkName UntrustedSubnetCIDR=$UntrustedSubnetCIDR TrustedSubnetCIDR=$TrustedSubnetCIDR existingUntrustedSubnetName=$existingUntrustedSubnetName existingTrustedSubnetName=$existingTrustedSubnetName Location=$location \
--no-wait

echo Adjusting OPNsense NSGs
echo Checking subnet status...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name fw-trusted -g $rg --vnet-name $virtualNetworkName --query provisioningState -o tsv)
    echo Trusted subnet "provisioningState="$prState
    sleep 5
done
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name fw-untrusted -g $rg --vnet-name $virtualNetworkName --query provisioningState -o tsv)
    echo Unrusted subnet "provisioningState="$prState
    sleep 5
done

#echo Checking OPNSense provisioning state:
# az deployment group show --name branch-opnnva-TwoNics -g $rg --query properties.provisioningState -o tsv
# Ensure default NSG is associated to OPNSense Trusted and Untrusted Networks
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name $virtualNetworkName --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group "" -o none
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name $virtualNetworkName --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group $location-default-nsg -o none
az network vnet subnet update --name fw-trusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group null  -o none
az network vnet subnet update --name fw-untrusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group null  -o none
az network vnet subnet update --name fw-trusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $location-default-nsg -o none
az network vnet subnet update --name fw-untrusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $location-default-nsg -o none
# Misc remove NSG from OPNSense NICs 
az network nic update -g $rg -n $nvafw-Trusted-NIC --network-security-group null --output none
az network nic update -g $rg -n $nvafw-Untrusted-NIC --network-security-group null --output none

# Add Rules to NSG
az network nsg rule create -g $rg --nsg-name $location-default-nsg -n 'default-allow-https' --direction Inbound --priority 310 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 443 --access Allow --protocol Tcp --description "Allow inbound HTTPS" --output none
az network nsg rule create -g $rg --nsg-name $location-default-nsg -n 'default-allow-vnetoutany' --direction Inbound --priority 320 --source-address-prefixes VirtualNetwork --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges '*' --access Allow --protocol '*' --description "Allow inbound VNET to Any for NVA Routing out" --output none
az network nsg rule create -g $rg --nsg-name $location-default-nsg  -n allow-udp500 --priority 330 --source-address-prefixes '*' --destination-address-prefixes '*' --destination-port-ranges 500 --direction Inbound --access Allow --protocol Udp -o none
az network nsg rule create -g $rg --nsg-name $location-default-nsg  -n allow-udp4500 --priority 340 --source-address-prefixes '*' --destination-address-prefixes '*' --destination-port-ranges 4500 --direction Inbound --access Allow --protocol Udp -o none

nvafw=$AzurehubName-opnfw1
AzurehubName=az-hub #Azure Hub Name
asn_hubfw=65000 # Set ASN

# Peer with Route Server
echo Peering NVAs with Route Server
nvafws=$(az vm list -g $rg --query '[?contains(name,`'$nvafw'`)].name' -o tsv)
for nvaintname in $nvafws
do
 #NVA BGP config variables (do not change)
 routeserver_IP1=$(az network routeserver show --name az-hub-rs --resource-group $rg --query 'virtualRouterIps[0]' -o tsv)
 routeserver_IP2=$(az network routeserver show --name az-hub-rs --resource-group $rg --query 'virtualRouterIps[1]' -o tsv)

 # Building Route Server BGP Peering
 echo Building BGP Peering between $AzurehubName-routeserver and $nvaintname
 az network routeserver peering create --resource-group $rg --routeserver az-hub-rs --name $nvaintname --peer-asn $asn_hubfw \
 --peer-ip $(az network nic show --name "$nvaintname"-Trusted-NIC --resource-group $rg --query ipConfigurations[0].privateIPAddress -o tsv) \
 --output none
done

# Enable Branch to Branch 
echo Enabling ARS Branch to Branch
az network routeserver update --resource-group $rg --name az-hub-rs --allow-b2b-traffic true --no-wait

#ExpressRoute specific variables
ername="az-er-circuit" 
perloc1="Chicago"
providerloc1=Megaport

#Create ER circuits
echo Creating ExpressRoute Circuits
az network express-route create --bandwidth 50 -n $ername --peering-location "$perloc1" -g $rg --provider $providerloc1 -l $location --sku-family MeteredData --sku-tier Standard -o none &>/dev/null &

# Display express route circuit service key
az network express-route show -n $ername -g $rg --query serviceKey -o tsv

# Only continue if the ExpressRoute Circuit has provider provisioning state as Provisioned
while [ $(az network express-route show -n $ername -g $rg --query serviceProviderProvisioningState -o tsv) != "Provisioned" ]; do echo "Waiting for ExpressRoute Circuit to be provisioned at the Provider..."; sleep 30; done

# Only continue if ExpressRoute Gateways has provisioning state as Succeeded
while [ $(az network vnet-gateway  list -g $rg --query '[].provisioningState' -o tsv) != "Succeeded" ]; do echo "Waiting for ExpressRoute Gateway to be provisioned..."; sleep 30; done

# Only continue if the ExpressRoute Circuit has provider provisioning state as Provisioned
while [ $(az network express-route show -n $ername -g $rg --query provisioningState -o tsv) != "Succeeded" ]; do echo "Waiting for ExpressRoute Circuit to be provisioned state..."; sleep 30; done

# Step 4 - Attach ER Circuit to the VNET ERGW on hub and Hub2
# Add check for Service Provider serviceProviderProvisioningState = Provisioned
erid=$(az network express-route show -n $ername -g $rg --query id -o tsv) 
az network vpn-connection create --name er-connection-to-hub \
--resource-group $rg --vnet-gateway1 az-hub-ergw \
--express-route-circuit2 $erid \
--routing-weight 0 \
--output none