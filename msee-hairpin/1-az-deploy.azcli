# Run both command below to create Hub1+On-Premises and Hub2

#Paramters
labname=msee-hairpin #Github repo folder name
rg=lab-msee-hairpin
hub1name=hub1
hub2name=hub2
hub1location=eastus2
hub2location=centralus
VmAdminUsername=azureuser
VmAdminPassword=Msft123Msft123
mypip=$(curl -4 ifconfig.io -s) #Captures your local Public IP and adds it to NSG to restrict access to SSH only for your Public IP.


# Define ExpressRoute parameters
ername=az-er-azure-ct # ExpressRoute Circuit Name
edge="Washington DC" #Peering Location
provider=Megaport # Provider

# Step 1 - Deploy Hub1 and Hub2 base Lab using the following ARM templates

az group create --name $rg-$hub1name --location $hub1location --output none
az deployment group create --name Hub1-$hub1location --resource-group $rg-$hub1name \
--template-uri https://raw.githubusercontent.com/dmauser/azure-hub-spoke-base-lab/main/azuredeployv5.json \
--parameters https://raw.githubusercontent.com/dmauser/azure-hub-spoke/main/msee-hairpin/parameters1.json \
--parameters location=$hub1location VmAdminUsername=$VmAdminUsername VmAdminPassword=$VmAdminPassword \
--no-wait

az group create --name $rg-$hub2name --location $hub2location --output none
az deployment group create --name Hub2-$hub2location --resource-group $rg-$hub2name \
--template-uri https://raw.githubusercontent.com/dmauser/azure-hub-spoke-base-lab/main/azuredeployv5.json \
--parameters https://raw.githubusercontent.com/dmauser/azure-hub-spoke/main/msee-hairpin/parameters2.json \
--parameters location=$hub2location VmAdminUsername=$VmAdminUsername VmAdminPassword=$VmAdminPassword \
--no-wait

# Step 2 - Create an ExpressRoute Circuit

# 1) Create ExpressRoute Circuit
# In this example ExpressRoute is created in "Washington DC" using Mepgaport as Provider. Make the necessary changes based on your needs
az network express-route create --bandwidth 50 -n $ername --peering-location "$edge" -g $rg-$hub1name --provider $provider -l $hub1location --sku-family MeteredData --sku-tier Standard -o none

# Get the expressroute servicekey
echo "ExpressRoute Service Key: " $(az network express-route show -n $ername -g $rg-$hub1name --query serviceKey -o tsv)

# Step 3 - Provision ExpressRoute Circuit with you provider
# Loop script to continue only when express route provider provisioning state is "Provisioned"
while true; do
    state=$(az network express-route show -n $ername -g $rg-$hub1name --query serviceProviderProvisioningState -o tsv)
    if [ $state == "Provisioned" ]; then
        break
    fi
    echo "Waiting for ExpressRoute Circuit to be provisioned..."
    sleep 10
done

# Loop script to check az-hub1-ergw and az-hub2-ergw2 are provisioned
while true; do
    state1=$(az network vnet-gateway show -n Az-Hub1-ergw -g $rg-$hub1name --query provisioningState -o tsv)
    state2=$(az network vnet-gateway show -n Az-Hub2-ergw -g $rg-$hub2name --query provisioningState -o tsv)
    if [ $state1 == "Succeeded" ] && [ $state2 == "Succeeded" ]; then
        break
    fi
    echo "Waiting for VNET ERGW to be provisioned..."
    sleep 10
done


# Step 4 - Attach ER Circuit to the VNET ERGW on Hub1 and Hub2
# Add check for Service Provider serviceProviderProvisioningState = Provisioned
erid=$(az network express-route show -n $ername -g $rg-$hub1name --query id -o tsv) 
az network vpn-connection create --name ER-Connection-to-Hub1 \
--resource-group $rg-$hub1name --vnet-gateway1 Az-Hub1-ergw \
--express-route-circuit2 $erid \
--routing-weight 0 \
--output none

erid=$(az network express-route show -n $ername -g $rg-$hub1name --query id -o tsv) 
az network vpn-connection create --name ER-Connection-to-Hub2 \
--resource-group $rg-$hub2name --vnet-gateway1 Az-Hub2-ergw \
--express-route-circuit2 $erid \
--routing-weight 0 \
--output none


echo "Installing net utilities inside VMs (traceroute, tcptraceroute, iperf3, hping3, and others)"
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in `az vm list -g $rg-$hub1name --query "[?contains(storageProfile.imageReference.publisher,'Canonical')].name" -o tsv`
do
 az vm extension set --force-update \
 --resource-group $rg-$hub1name \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done
for vm in `az vm list -g $rg-$hub2name --query "[?contains(storageProfile.imageReference.publisher,'Canonical')].name" -o tsv`
do
 az vm extension set --force-update \
 --resource-group $rg-$hub2name \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done


echo "Deployment hs been completed successfully."