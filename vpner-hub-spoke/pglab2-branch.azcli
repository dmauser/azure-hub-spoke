branch# Pre-Requisites

# Set Azure Subscription
az account set --subscription dmauser-fdpo

#Parameters
rg=ervpn-branch
region=eastus2
username=azureuser
password="Msft123Msft123" #Please change your password
vmsize=Standard_DS1_v2 #VM Size
mypip=$(curl -4 ifconfig.io -s) #Replace with your home Public IP in case you run this over Cloudshell
AzurehubName=tipnode-vnet-9258

# Create resource group
az group create --name $rg --location $region -o none

# OPNsense NVA1 parameters
ShellScriptName=configureopnsense.sh
scenarioOption="TwoNics"
virtualMachineSize=Standard_DS1_v2
virtualMachineName=branch-opnnva
virtualNetworkName=branch-vnet
existingvirtualNetwork=new
VNETAddress=10.100.0.0/24
UntrustedSubnetCIDR=10.100.0.0/28
TrustedSubnetCIDR=10.100.0.16/28
GatewaySubnet=10.100.0.32/27
subnet1=10.100.0.96/27
subnet2=10.100.0.160/27
existingUntrustedSubnetName=Untrusted-Subnet
existingTrustedSubnetName=Trusted-Subnet
OpnScriptURI=https://raw.githubusercontent.com/dmauser/azure-hub-spoke/main/vpner-hub-spoke/script2/

#ExpressRoute specific variables
ername1="azure-er-circuit" 
perloc1="Washington DC"
providerloc1=Megaport
ername2="branch-er-circuit"
perloc2="Washington DC"
providerloc2=Megaport

echo "Deploying OPNsense NVA1 on the branch"
az vm image terms accept --urn thefreebsdfoundation:freebsd-14_1:14_1-release-amd64-gen2-zfs:14.1.0 -o none
az deployment group create --name branch-nva-$RANDOM --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters OpnScriptURI=$OpnScriptURI virtualMachineName=$virtualMachineName virtualMachineSize=$virtualMachineSize existingvirtualNetwork=$existingvirtualNetwork VNETAddress="[\"$VNETAddress\"]" virtualNetworkName=$virtualNetworkName UntrustedSubnetCIDR=$UntrustedSubnetCIDR TrustedSubnetCIDR=$TrustedSubnetCIDR existingUntrustedSubnetName=$existingUntrustedSubnetName existingTrustedSubnetName=$existingTrustedSubnetName Location=$region \
--no-wait

sleep 5
echo Checking Branch VNET provisioning state
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet show -n $virtualNetworkName -g $rg  --query 'provisioningState' -o tsv)
    echo "Branch VNET provisioning state provisioningState="$prState
    sleep 5
done

echo Creating Branch VMs...
# Deploy branch VM:
# Subnet1
az network vnet subnet create -g $rg --vnet-name $virtualNetworkName -n subnet1 --address-prefixes $subnet1  --output none
az vm create -n branch-vm1  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet subnet1 --vnet-name $virtualNetworkName --admin-username $username --admin-password $password --nsg "" --no-wait --only-show-errors

#Create ER circuits
echo Creating ExpressRoute Circuits
az network express-route create --bandwidth 50 -n $ername1 --peering-location "$perloc1" -g $rg --provider $providerloc1 -l $region --sku-family MeteredData --sku-tier Standard -o none &>/dev/null &
az network express-route create --bandwidth 50 -n $ername2 --peering-location "$perloc2" -g $rg --provider $providerloc2 -l $region --sku-family MeteredData --sku-tier Standard -o none &>/dev/null &

echo Associating NSG on Spokes and Branch VNETs
#Updating NSGs:
az network nsg create --resource-group $rg --name $region-default-nsg --location $region -o none
# Adding my home public IP to NSG for SSH access
az network nsg rule create -g $rg --nsg-name $region-default-nsg -n 'default-allow-ssh' --direction Inbound --priority 300 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol Tcp --description "Allow inbound SSH" --output none
az network nsg rule create -g $rg --nsg-name $region-default-nsg -n 'default-allow-https' --direction Inbound --priority 310 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 443 --access Allow --protocol Tcp --description "Allow inbound HTTPS" --output none
az network nsg rule create -g $rg --nsg-name $region-default-nsg -n 'default-allow-vnetoutany' --direction Inbound --priority 320 --source-address-prefixes VirtualNetwork --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges '*' --access Allow --protocol '*' --description "Allow inbound VNET to Any for NVA Routing out" --output none
# Associating NSG to the VNET subnets (Spokes and Branches)
az network vnet subnet update --name subnet1 --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $region-default-nsg -o none

#Create ExpressRoute Gateway
echo Creating Branch ExpressRoute Gateway
az network vnet subnet create --address-prefix $GatewaySubnet --name GatewaySubnet -g $rg --vnet-name $virtualNetworkName --output none
az network public-ip create --name branch-ergw-pip --resource-group $rg --location $region -o none --sku Standard
az network vnet-gateway create --name branch-ergw --resource-group $rg --location $region --public-ip-address branch-ergw-pip --vnet $virtualNetworkName --gateway-type "ExpressRoute" --sku "Standard" --allow-remote-vnet-traffic true --no-wait

# Loop script to check ER Gateways provisioning state
echo Validating ER Gateways provisioning...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet-gateway show -n branch-ergw -g $rg --query 'provisioningState' -o tsv)
    echo "Branch ER Gateway provisioning state provisioningState="$prState
    sleep 5
done

echo Adjusting OPNsense NSGs
echo Checking subnet status...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name Trusted-Subnet -g $rg --vnet-name $virtualNetworkName --query provisioningState -o tsv)
    echo Trusted subnet "provisioningState="$prState
    sleep 5
done
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name Untrusted-Subnet -g $rg --vnet-name $virtualNetworkName --query provisioningState -o tsv)
    echo Unrusted subnet "provisioningState="$prState
    sleep 5
done
#echo Checking OPNSense provisioning state:
# az deployment group show --name branch-opnnva-TwoNics -g $rg --query properties.provisioningState -o tsv
# Misc remove NSG from OPNSense NICs 
az network nic update -g $rg -n $virtualMachineName-Trusted-NIC --network-security-group null --output none
az network nic update -g $rg -n $virtualMachineName-Untrusted-NIC --network-security-group null --output none
# Ensure default NSG is associated to OPNSense Trusted and Untrusted Networks
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name $virtualNetworkName --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group "" -o none
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name $virtualNetworkName --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group $region-default-nsg -o none
az network vnet subnet update --name Trusted-Subnet --resource-group $rg --vnet-name $virtualNetworkName --network-security-group null  -o none
az network vnet subnet update --name Untrusted-Subnet --resource-group $rg --vnet-name $virtualNetworkName --network-security-group null  -o none
az network vnet subnet update --name Trusted-Subnet --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $region-default-nsg -o none
az network vnet subnet update --name Untrusted-Subnet --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $region-default-nsg -o none

### Installing tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others (check link below for more details) 
echo "Installing net utilities inside VMs (traceroute, tcptraceroute, iperf3, hping3, and others)"
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in `az vm list -g $rg --query "[?contains(storageProfile.imageReference.publisher,'Canonical')].name" -o tsv`
do
 az vm extension set --force-update \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done

# 1) Force VM traffic to go over OPNSense NVA using UDR
# Create UDR with disable GatewayPropagation to branch
az network route-table create -g $rg -n branch-forcevpn-udr --disable-bgp-route-propagation true -o none
# Add default to branch-forcevpn-udr to openvpn trusted interface
nvatrustedip=$(az network nic show -g $rg -n $virtualMachineName-Trusted-NIC --query ipConfigurations[0].privateIPAddress -o tsv)
az network route-table route create -g $rg --route-table-name branch-forcevpn-udr -n default --address-prefix 0.0.0.0/0 --next-hop-type VirtualAppliance --next-hop-ip-address $nvatrustedip -o none
az network route-table route create -g $rg --route-table-name branch-forcevpn-udr -n exception --address-prefix $mypip/32 --next-hop-type Internet -o none
# Associate route table to subnet1 on branch vnet
az network vnet subnet update --name subnet1 --resource-group $rg --vnet-name $virtualNetworkName --route-table branch-forcevpn-udr -o none

#Enabling boot diagnostics for all VMs in the resource group (Serial console)
echo Enabling boot diagnostics
az vm boot-diagnostics enable --ids $(az vm list -g $rg --query '[].{id:id}' -o tsv) -o none
echo Deployment has finished