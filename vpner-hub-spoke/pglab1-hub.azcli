rg=tipnode-rg-9258
region=eastus2euap
username=azureuser
password="Msft123Msft123" #Please change your password
vmsize=Standard_DS1_v2 #VM Size
mypip=$(curl -4 ifconfig.io -s) #Replace with your home Public IP in case you run this over Cloudshell
AzurehubName=tipnode-vnet-9258
vpngwname=tipnode-vng-9258

# Loop script to check for completion of VPN GW creation:
while true
do
  status=$(az network vnet-gateway show --name $vpngwname --resource-group $rg --query provisioningState -o tsv)
  echo "Checking for VPN GW update status: $status"
  if [ "$status" = "Succeeded" ]; then
    echo "VPN GW update completed!"
    break
  fi
  sleep 10
done

# Get existing vnet address space and parse as parameter
vnetaddress=$(az network vnet show --name $AzurehubName --resource-group $rg --query addressSpace.addressPrefixes[0] -o tsv)

# Add VNET prefix to AzurehubName
az network vnet update --name $AzurehubName --resource-group $rg --address-prefixes $vnetaddress 10.0.0.0/24 -o none

# Create vnet az-spk1-vnet and az-spk2-vnet
az network vnet create --name az-spk1-vnet --resource-group $rg --location $region --address-prefix 10.0.1.0/24 --subnet-name main --subnet-prefix 10.0.1.0/27 -o none
az network vnet create --name az-spk2-vnet --resource-group $rg --location $region --address-prefix 10.0.2.0/24 --subnet-name main --subnet-prefix 10.0.2.0/27 -o none

# Create NSG
az network nsg create --name $region-default-nsg --resource-group $rg --location $region -o none

# Associate NSG to main subnets
az network vnet subnet update --vnet-name az-spk1-vnet --name main --resource-group $rg --network-security-group $region-default-nsg -o none
az network vnet subnet update --vnet-name az-spk2-vnet --name main --resource-group $rg --network-security-group $region-default-nsg -o none

# Create Ubuntu VM on subnet1 
az vm create -n az-spk1-vm1  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name az-spk1-vnet --admin-username $username --admin-password $password --nsg "" --no-wait --only-show-errors
az vm create -n az-spk2-vm1  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name az-spk2-vnet --admin-username $username --admin-password $password --nsg "" --no-wait --only-show-errors

# Peer AzurehubName to spokes and spokes to AzurehubName
az network vnet peering create --name hub-to-spk1 --resource-group $rg --vnet-name $AzurehubName --remote-vnet az-spk1-vnet --allow-vnet-access -o none --allow-gateway-transit true
az network vnet peering create --name hub-to-spk2 --resource-group $rg --vnet-name $AzurehubName --remote-vnet az-spk2-vnet --allow-vnet-access -o none --allow-gateway-transit true
az network vnet peering create --name spk1-to-hub --resource-group $rg --vnet-name az-spk1-vnet --remote-vnet $AzurehubName --allow-vnet-access -o none --use-remote-gateways true
az network vnet peering create --name spk2-to-hub --resource-group $rg --vnet-name az-spk2-vnet --remote-vnet $AzurehubName --allow-vnet-access -o none --use-remote-gateways true

# Create mainsubnet on AzurehubName
az network vnet subnet create --name main --resource-group $rg --vnet-name $AzurehubName --address-prefixes 10.0.0.0/27 -o none

# Create Azure Route Server subnet
az network vnet subnet create --name RouteServerSubnet --resource-group $rg --vnet-name $AzurehubName --address-prefixes 10.0.0.64/26 -o none

# Create Azure Route Server Public IP
az network public-ip create --name az-hub-ars-pip --resource-group $rg --location $region --sku Standard --allocation-method Static -o none
# Get Azure Route Server subnet id
subnetid=$(az network vnet subnet show --name RouteServerSubnet --resource-group $rg --vnet-name $AzurehubName --query id -o tsv)
# Create Azure Route Server
az network routeserver create --name az-hub-ars --resource-group $rg --hosted-subnet $subnetid --public-ip-address az-hub-ars-pip --location $region -o none --hub-routing-preference ASPath &>/dev/null &

#Create ExpressRoute Gateway
echo Creating Branch ExpressRoute Gateway
az network public-ip create --name az-hub-ergw-pip --resource-group $rg --location $region -o none --sku Standard
az network vnet-gateway create --name az-hub-ergw --resource-group $rg --location $region --public-ip-address az-hub-ergw-pip --vnet $AzurehubName --gateway-type "ExpressRoute" --sku "Standard" --allow-remote-vnet-traffic true --no-wait
# Check Expressroute Gateway provisioning state
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet-gateway show -n az-hub-ergw  -g $rg  --query 'provisioningState' -o tsv)
    echo "Expressroute Gateway provisioning state provisioningState="$prState
    sleep 5
done

# Enable Gateway Private IPs and BGP over APIPA:
az network vnet-gateway update --name $vpngwname --resource-group $rg --set enablePrivateIpAddress=true bgpSettings.bgpPeeringAddresses[0].customBgpIpAddresses=[\"169.254.21.1\"] bgpSettings.bgpPeeringAddresses[1].customBgpIpAddresses=[\"169.254.21.2\"] --no-wait

# Loop script to check for completion of VPN GW creation:
while true
do
  status=$(az network vnet-gateway show --name $vpngwname --resource-group $rg --query provisioningState -o tsv)
  echo "Checking for VPN GW update status: $status"
  if [ "$status" = "Succeeded" ]; then
    echo "VPN GW update completed!"
    break
  fi
  sleep 10
done
