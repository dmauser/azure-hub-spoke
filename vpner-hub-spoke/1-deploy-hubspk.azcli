# Pre-Requisites

#Parameters
rg=lab-hs-vpner
region=westus3
username=azureuser
password="Msft123Msft123" #Please change your password
vmsize=Standard_DS1_v2 #VM Size
mypip=$(curl -4 ifconfig.io -s) #Replace with your home Public IP in case you run this over Cloudshell
AzurehubName=az-hub
vpngwsize=VpnGw1AZ
asn=65515

#ExpressRoute specific variables
ername1="azure-er-circuit" 
perloc1="Chicago"
providerloc1=Megaport
ername2="branch-er-circuit"
perloc2="Chicago"
providerloc2=Megaport

az group create --name $rg --location $region -o none
az deployment group create --name hub-$region --resource-group $rg \
--template-uri https://raw.githubusercontent.com/dmauser/azure-hub-spoke-base-lab/main/azuredeployv4.json \
--parameters https://raw.githubusercontent.com/dmauser/azure-hub-spoke/main/vpner-hub-spoke/parameters.json \
--parameters VmAdminUsername=$username VmAdminPassword=$password Restrict_SSH_VM_AccessByPublicIP=$mypip \
--no-wait

# Continue only if resource group is created
while true
do
  echo "Checking for resource group creation..."
  status=$(az group show --name $rg --query properties.provisioningState -o tsv)
  if [ "$status" = "Succeeded" ]; then
    echo "Resource group created!"
    break
  fi
  sleep 10
done

#Create ER circuits
echo Creating ExpressRoute Circuits
az network express-route create --bandwidth 50 -n $ername1 --peering-location "$perloc1" -g $rg --provider $providerloc1 -l $region --sku-family MeteredData --sku-tier Standard -o none &>/dev/null &
az network express-route create --bandwidth 50 -n $ername2 --peering-location "$perloc2" -g $rg --provider $providerloc2 -l $region --sku-family MeteredData --sku-tier Standard -o none &>/dev/null &

# Wait until GatewaySubnet is created on az-hub-vnet:
while true
do
  echo "Checking for GatewaySubnet creation..."
  status=$(az network vnet subnet show --name GatewaySubnet --vnet-name az-hub-vnet --resource-group $rg --query provisioningState -o tsv)
  if [ "$status" = "Succeeded" ]; then
    echo "GatewaySubnet created!"
    break
  fi
  sleep 10
done



#AZ VPN GW Public IP STD:
az network public-ip create --name $AzurehubName-vpngw-pip1 --resource-group $rg --sku Standard --zone 1 2 3 -o none
az network public-ip create --name $AzurehubName-vpngw-pip2 --resource-group $rg --sku Standard --zone 1 2 3 -o none

az network vnet-gateway create --name $AzurehubName-vpngw --public-ip-address $AzurehubName-vpngw-pip1 $AzurehubName-vpngw-pip2 \
--resource-group $rg \
--vnet $AzurehubName-vnet \
--gateway-type Vpn \
--vpn-type RouteBased \
--sku $vpngwsize \
--asn $asn \
--no-wait

# Loop script to check for completion of VPN GW creation:
while true
do
  status=$(az network vnet-gateway show --name $AzurehubName-vpngw --resource-group $rg --query provisioningState -o tsv)
  echo "Checking for VPN GW update status: $status"
  if [ "$status" = "Succeeded" ]; then
    echo "VPN GW update completed!"
    break
  fi
  sleep 10
done

# Enable Gateway Private IPs and BGP over APIPA:
az network vnet-gateway update --name $AzurehubName-vpngw --resource-group $rg --set enablePrivateIpAddress=true bgpSettings.bgpPeeringAddresses[0].customBgpIpAddresses=[\"169.254.21.1\"] bgpSettings.bgpPeeringAddresses[1].customBgpIpAddresses=[\"169.254.21.2\"] --no-wait

# Loop script to check for completion of VPN GW creation:
while true
do
  status=$(az network vnet-gateway show --name $AzurehubName-vpngw --resource-group $rg --query provisioningState -o tsv)
  echo "Checking for VPN GW update status: $status"
  if [ "$status" = "Succeeded" ]; then
    echo "VPN GW update completed!"
    break
  fi
  sleep 10
done

# ERGW allow-remote-vnet-traffic
az network vnet-gateway update --name az-hub-ergw --resource-group $rg --allow-remote-vnet-traffic true --no-wait

# Loop script to check both ER Gateways provisioning state
while true; do
    ergw1status=$(az network vnet-gateway list -g $rg --query "[?name=='$AzurehubName-ergw'].provisioningState" -o tsv)
    if [ $ergw1status == "Succeeded" ]; then
        break
    fi
    echo "Waiting for ER Gateway to be provisioned..."
    echo "$AzurehubName-ergw: $ergw1status"
    sleep 10
done

# Dump ExpressRoute Circuits name and service keys from the resource group:
echo ExpressRoute Circuits and its service keys:
az network express-route list -g $rg --query "[].{Name:name, ServiceKey:serviceKey}" -o table
echo Continue provisoning with the Service Provider

