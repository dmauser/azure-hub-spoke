# Pre-Requisites

#Parameters
region=southcentralus
rg=lab-ars-opn-er
username=azureuser
password="Msft123Msft123" #Please change your password
vmsize=Standard_DS1_v2 #VM Size
mypip=$(curl -4 ifconfig.io -s) #Replace with your home Public IP in case you run this over Cloudshell


# OPNsense NVA1 parameters
ShellScriptName=configureopnsense.sh
scenarioOption="TwoNics"
virtualMachineSize=Standard_DS1_v2
virtualMachineName=branch-opnnva
virtualNetworkName=branch
existingvirtualNetwork=new
VNETAddress=10.100.0.0/24 
UntrustedSubnetCIDR=10.100.0.0/28
TrustedSubnetCIDR=10.100.0.16/28
GatewaySubnet=10.100.0.32/27
subnet1=10.100.0.96/27
subnet2=10.100.0.160/27
existingUntrustedSubnetName=untrusted
existingTrustedSubnetName=trusted
OpnScriptURI=https://raw.githubusercontent.com/dmauser/azure-virtualwan/main/vpn-over-er/opnsense/

# Creating rg
az group create -n $rg -l $region --output none

echo "Deploying OPNsense NVA1 on the branch"
az vm image terms accept --urn thefreebsdfoundation:freebsd-13_0:13_0-release:13.0.0 -o none
az deployment group create --name branch-nva-$RANDOM --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters OpnScriptURI=$OpnScriptURI scenarioOption=$scenarioOption virtualMachineName=$virtualMachineName virtualMachineSize=$virtualMachineSize existingvirtualNetwork=$existingvirtualNetwork VNETAddress="[\"$VNETAddress\"]" virtualNetworkName=$virtualNetworkName UntrustedSubnetCIDR=$UntrustedSubnetCIDR TrustedSubnetCIDR=$TrustedSubnetCIDR existingUntrustedSubnetName=$existingUntrustedSubnetName existingTrustedSubnetName=$existingTrustedSubnetName Location=$region \
--no-wait

sleep 5
echo Checking Branch VNET provisioning state
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet show -n branch -g $rg  --query 'provisioningState' -o tsv)
    echo "Branch VNET provisioning state provisioningState="$prState
    sleep 5
done
echo Creating Branch VMs...
# Depoly On-premises VM:
# Subnet1
az network vnet subnet create -g $rg --vnet-name branch -n main --address-prefixes $subnet1  --output none
az vm create -n branch-vm1  -g $rg --image ubuntults --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name branch --admin-username $username --admin-password $password --nsg "" --no-wait

# Subnet2
#az network vnet subnet create -g $rg --vnet-name branch -n subnet2 --address-prefixes $subnet2  --output none
#az vm create -n branch-vm2  -g $rg --image ubuntults --public-ip-sku Standard --size $vmsize -l $region --subnet subnet2 --vnet-name branch --admin-username $username --admin-password $password --nsg "" --no-wait

# UDR to reach Azure
nvatrustedip=$(az network nic show -g $rg -n $virtualMachineName-Trusted-NIC --query ipConfigurations[0].privateIpAddress -o tsv)
## Creating UDR + Disable BGP Propagation
az network route-table create --name RT-to-extbranch-NVA  --resource-group $rg --location $region --disable-bgp-route-propagation true --output none
## Default route to NVA
az network route-table route create --resource-group $rg --name default --route-table-name RT-to-extbranch-NVA \
--address-prefix 0.0.0.0/0 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $nvatrustedip \
--output none

#Create ER circuits
echo Creating ExpressRoute Circuits
az network express-route create --bandwidth 50 -n $ername1 --peering-location "$perloc1" -g $rg --provider $providerloc1 -l $region --sku-family MeteredData --sku-tier Standard -o none &>/dev/null &

echo Associating NSG on Spokes and Branch VNETs
#Updating NSGs:
az network nsg create --resource-group $rg --name default-nsg-$region --location $region -o none
# Adding my home public IP to NSG for SSH access
az network nsg rule create -g $rg --nsg-name default-nsg-$region -n 'default-allow-ssh' --direction Inbound --priority 100 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol Tcp --description "Allow inbound SSH" --output none
az network nsg rule create -g $rg --nsg-name default-nsg-$region -n 'default-allow-https' --direction Inbound --priority 110 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 443 --access Allow --protocol Tcp --description "Allow inbound HTTPS" --output none
az network nsg rule create -g $rg --nsg-name default-nsg-$region -n 'default-allow-vnetoutany' --direction Inbound --priority 120 --source-address-prefixes VirtualNetwork --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges '*' --access Allow --protocol '*' --description "Allow inbound VNET to Any for NVA Routing out" --output none
# Associating NSG to the VNET subnets (Spokes and Branches)
az network vnet subnet update --id $(az network vnet list -g $rg --query '[?contains(location,`'$region'`)].{id:subnets[0].id}' -o tsv) --network-security-group default-nsg-$region -o none

#Enabling boot diagnostics for all VMs in the resource group (Serial console)
echo Enabling boot diagnostics
az vm boot-diagnostics enable --ids $(az vm list -g $rg --query '[].{id:id}' -o tsv) -o none

### Installing tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others (check link below for more details) 
echo "Installing net utilities inside VMs (traceroute, tcptraceroute, iperf3, hping3, and others)"
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in `az vm list -g $rg --query "[?storageProfile.imageReference.offer=='UbuntuServer'].name" -o tsv`
do
 az vm extension set \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done

#Create ExpressRoute Gateway
echo Creating Branch ExpressRoute Gateway
az network vnet subnet create --address-prefix $GatewaySubnet --name GatewaySubnet -g $rg --vnet-name branch --output none
az network public-ip create --name branch-ergw-pip --resource-group $rg --location $region -o none
az network vnet-gateway create --name branch-ergw --resource-group $rg --location $region --public-ip-address branch-ergw-pip --vnet branch --gateway-type "ExpressRoute" --sku "Standard" --no-wait
echo Validating ER Gateways provisioning...

#Branches VPN Gateways provisioning status
prState=$(az network vnet-gateway show -g $rg -n branch-ergw --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo ER Gateway is in fail state. Deleting and rebuilding.
    az network vnet-gateway delete -n branch-ergw -g $rg
    az network vnet-gateway create --name branch-ergw --resource-group $rg --location $region --public-ip-address branch-ergw-pip --vnet branch --gateway-type "ExpressRoute" --sku "Standard" --no-wait
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vnet-gateway show -g $rg -n branch-ergw --query provisioningState -o tsv)
        echo "branch-ergw provisioningState="$prState
        sleep 5
    done
fi

echo Adjusting OPNsense NSGs
echo Checking subnet status...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name Trusted-Subnet -g $rg --vnet-name branch --query provisioningState -o tsv)
    echo Trusted subnet "provisioningState="$prState
    sleep 5
done
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name Untrusted-Subnet -g $rg --vnet-name branch --query provisioningState -o tsv)
    echo Unrusted subnet "provisioningState="$prState
    sleep 5
done
#echo Checking OPNSense provisioning state:
# az deployment group show --name branch-opnnva-TwoNics -g $rg --query properties.provisioningState -o tsv
# Misc remove NSG from OPNSense NICs 
az network nic update -g $rg -n $virtualMachineName-Trusted-NIC --network-security-group "" --output none
az network nic update -g $rg -n $virtualMachineName-Untrusted-NIC --network-security-group "" --output none
# Ensure default NSG is associated to OPNSense Trusted and Untrusted Networks
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name branch --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group "" -o none
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name branch --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group default-nsg-$region -o none
az network vnet subnet update --name Trusted-Subnet --resource-group $rg --vnet-name branch --network-security-group ""  -o none
az network vnet subnet update --name Untrusted-Subnet --resource-group $rg --vnet-name branch --network-security-group ""  -o none
az network vnet subnet update --name Trusted-Subnet --resource-group $rg --vnet-name branch --network-security-group default-nsg-$region -o none
az network vnet subnet update --name Untrusted-Subnet --resource-group $rg --vnet-name branch --network-security-group default-nsg-$region -o none
echo Deployment has finished